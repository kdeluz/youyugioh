<h1>Checkout</h1>

<%= form_with model: @order, url: orders_path, method: :post, local: true, id: 'payment-form' do |form| %>
  <div class="field">
    <%= form.label :address_line1 %>
    <div class="control">
      <%= form.text_field :address_line1, class: 'input', value: @order.address_line1 %>
    </div>
  </div>

  <div class="field">
    <%= form.label :city %>
    <div class="control">
      <%= form.text_field :city, class: 'input', value: @order.city %>
    </div>
  </div>

  <div class="field">
    <%= form.label :province %>
    <div class="control">
      <%= form.select :province, province_options, {}, class: 'input' %>
    </div>
  </div>

  <div class="field">
    <%= form.label :postal_code %>
    <div class="control">
      <%= form.text_field :postal_code, class: 'input', value: @order.postal_code %>
    </div>
  </div>

  <div class="field">
    <%= form.label :country %>
    <div class="control">
      <%= form.text_field :country, class: 'input', value: @order.country %>
    </div>
  </div>

  <h2>Order Summary</h2>
  <table class="table is-fullwidth">
    <thead>
      <tr>
        <th>Product</th>
        <th>Quantity</th>
        <th>Price</th>
      </tr>
    </thead>
    <tbody>
      <% @cart.each do |product_id, quantity| %>
        <% product = Product.find(product_id) %>
        <tr>
          <td><%= product.name %></td>
          <td><%= quantity %></td>
          <td>$<%= product.price * quantity %></td>
        </tr>
      <% end %>
    </tbody>
  </table>

  <h2>Taxes</h2>
  <p>Total before taxes: <%= number_to_currency(@total_amount, unit: "$") %></p>
  <p>GST: <%= number_to_currency(@gst, unit: "$") %></p>
  <p>PST: <%= number_to_currency(@pst, unit: "$") %></p>
  <p>HST: <%= number_to_currency(@hst, unit: "$") %></p>
  <p>QST: <%= number_to_currency(@qst, unit: "$") %></p>
  <p>Total after taxes: <%= number_to_currency(@total_with_taxes, unit: "$") %></p>

  <div class="field">
    <div class="control">
      <%= form.submit 'Place Order', class: 'button is-primary' %>
    </div>
  </div>

  <div id="card-element">
    <!-- A Stripe Element will be inserted here. -->
  </div>
  <div id="card-errors" role="alert"></div>
  <%= form.hidden_field :stripe_token, id: 'stripeToken' %>
<% end %>

<script src="https://js.stripe.com/v3/"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Create a Stripe client
    var stripe = Stripe('<%= Rails.configuration.stripe[:publishable_key] %>');

    // Create an instance of Elements
    var elements = stripe.elements();

    // Custom styling can be passed to options when creating an Element
    var style = {
      base: {
        // Add your custom styling here
        color: '#32325d',
        fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
        fontSmoothing: 'antialiased',
        fontSize: '16px',
        '::placeholder': {
          color: '#aab7c4'
        }
      },
      invalid: {
        color: '#fa755a',
        iconColor: '#fa755a'
      }
    };

    // Create an instance of the card Element
    var card = elements.create('card', {style: style});

    // Add an instance of the card Element into the `card-element` <div>
    card.mount('#card-element');

    // Handle real-time validation errors from the card Element
    card.on('change', function(event) {
      var displayError = document.getElementById('card-errors');
      if (event.error) {
        displayError.textContent = event.error.message;
      } else {
        displayError.textContent = '';
      }
    });

    // Handle form submission
    var form = document.getElementById('payment-form');
    form.addEventListener('submit', function(event) {
      event.preventDefault();

      stripe.createToken(card).then(function(result) {
        if (result.error) {
          // Inform the customer that there was an error
          var errorElement = document.getElementById('card-errors');
          errorElement.textContent = result.error.message;
        } else {
          // Send the token to your server
          stripeTokenHandler(result.token);
        }
      });
    });

    // Submit the form with the Stripe token
    function stripeTokenHandler(token) {
      var form = document.getElementById('payment-form');
      var hiddenInput = document.createElement('input');
      hiddenInput.setAttribute('type', 'hidden');
      hiddenInput.setAttribute('name', 'order[stripe_token]');
      hiddenInput.setAttribute('value', token.id);
      form.appendChild(hiddenInput);

      // Submit the form
      form.submit();
    }
  });
</script>
